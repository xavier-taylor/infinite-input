This file is a place to centralize notes about the SRS algorithm.

Basic algorithm:
read/listen cards have due (timestamp) and interval(double, represents days).

Your current value of due was arrived at by adding the current interval to the previous due.

Consider a read card, c. It has a due timestamp d. It was just studied at timestamp s.
Its current interval value is i.

We calculate a new interval value like this:

new_interval = i + .5*i*((i-(d-s))/i)
note that d-s is expressed as a real number of days, ie 1.5 or -3.4 etc
new_due = s + new_interval days
The basic intuition of that formula is that when you study a word on the day it is due,
the next interval is 1.5 times the previous one.

Basic structure:

1) Learning a new word (student_word) [day 0]
2) Studying a word you have learned (student_word_listen, student_word_read) [day 1] onwards
    When you finish 1), new student_word_listen/read rows get created with
        * interval set to 1
        * newDue set to start of the following day [day 1], ie 00:00 in getNewProperties()
            and learnWord()
3) When a student_word_listen/read is due on a particular day, we try to find a document containing that word.
    * If we cannot find a document, the student is assigned that word to study as a single word 'orphan'
4) When we get a word wrong (either in a document or as an orphan) we set the 'state' on the associated 
    student_word_listen/read to 'forgot'. It then must progress to 'recovering' before returning to 'normal'
    * typically, once you get a word wrong is appears in the 'words' study for the remainder of your session that day,
        as it progresses through 'recovering' back into 'normal'.
        But, if you stopped studying with an incomplete session, ie, you finished a day with words in states 'forgot'/'recovering'
        those words would be returned to you in the 'oprhans' array the next day.
5) due query with an interval of 1. When grabbing the set of documents and orphans to study, any due word with
    an interval of 1 will be, if possible, returned in at least 3 documents. This is because we either learned it for the first time yesterday,
    or it moved from recovering to normal yesterday. However, as an orphan, just return it once - we trust the normal->forgot->recovering-> normal flow to
    get us enough reps of orphans.

student_word_listen/read state:

* normal
    * start here
    * on correct, stay in normal, normal srs
    * on incorrect, move to forgot, interval = 1 and due = 1 min from now
* forgot
    * on incorrect, stay here, interval = 1, new due in 1 min
    * on correct, move to recovering, interval = 1, due 5 mins from now
* recovering
    * on incorrect, move to forgot, interval = 1, new due in 1 min 
    * on correct, due tomorrow at 00:00, interval = 1

Each time a word is studied in either document or as a single word, SQL and apollo client cache are updated according to the above.
Each time a word is studied in eitehr document or as a single word, we update the words list (ie the list of orphans+ words we forgot, currently in a reactive var).
    Any word that moves from recovering to normal is removed from the words list.
    The words list is sorted: [forgot or recovering words whose due is <= now, sorted by due], normal cards, [forgot or recovering words whose due is > now (but less than tomorrow)]
    Any word that is in state normal is removed from the words list upon being studied